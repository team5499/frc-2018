ext {
  WPILib_version = '2018.1.1'
  WPIUtil_version = '3.0.0'
  OpenCV_version = '3.1.0'
  NetworkTables_version = '3.1.7'
  Ntcore_version = '4.0.0'
  CameraServer_version = '1.1.0'
  CTREToolsuite_version = '5.2.1.1'
  GSON_version = '2.8.2'

  // input ip at run
  RoboRIO_target = '10.54.99.2'

  MainClass = 'org.team5499.robots.frc2018.Robot'
}

apply plugin: 'java'

sourceSets.main.java.srcDirs = ['src']

repositories {
  mavenCentral()
  maven {
    url 'http://first.wpi.edu/FRC/roborio/maven/release'
  }
  maven {
    url 'https://maven.team5499.org/'
  }
}

dependencies {
  compile "edu.wpi.first.wpilibj:wpilibj-java:$WPILib_version"
  compile "edu.wpi.first.wpiutil:wpiutil-java:$WPIUtil_version"
  compile "org.opencv:opencv-java:$OpenCV_version"
  compile "edu.wpi.first.ntcore:ntcore-java:$Ntcore_version"
  compile "edu.wpi.first.cscore:cscore-java:$CameraServer_version"
  compile "openrio.mirror.third.ctre:CTRE-phoenix-java:$CTREToolsuite_version"
  compile "com.google.code.gson:gson:$GSON_version"

  runtime "edu.wpi.first.wpilibj:wpilibj-jni:$WPILib_version:linuxathena"
  runtime "org.opencv:opencv-natives:$OpenCV_version:linux-arm"
  runtime "org.opencv:opencv-jni:$OpenCV_version:linux-arm"
  runtime "edu.wpi.first.cscore:cscore-jni:$CameraServer_version:linuxathena"
  runtime "edu.wpi.first.wpiutil:wpiutil-java:$WPIUtil_version"
  runtime "edu.wpi.first.ntcore:ntcore-jni:$Ntcore_version:linuxathena"
  runtime "openrio.mirror.third.ctre:CTRE-phoenix-java:$CTREToolsuite_version:native@zip"
}

jar {
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
    attributes 'Robot-Class': "$MainClass"
  }
}

task runtimeLibraries {
  doLast {
    configurations.runtime.asFileTree.each { lib ->
      copy {
        from zipTree(lib)
        into getTemporaryDir().toPath().resolve('runtimeLibraries')
        include '**/*.so*'
        includeEmptyDirs = false
        eachFile { details ->
          details.setRelativePath(new RelativePath(true, details.getName()))
          println details.getName()
        }
      }
    }
  }
}

task zipLibraries(type: Zip, dependsOn: runtimeLibraries) {
  from runtimeLibraries.getTemporaryDir().toPath().resolve('runtimeLibraries')
  into file('lib')
  include '*.*'
  archiveName 'lib.zip'
  destinationDir(getTemporaryDir().toPath().resolve('lib_zip').toFile())
  eachFile { details ->
     details.setRelativePath(new RelativePath(true, details.getName()))
     println details.getName()
  }
}
   
task deployLibraries {
  dependsOn zipLibraries
  if(project.hasProperty('ip')) {
    RoboRIO_target=ip
  }
  doLast {
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', zipLibraries.getTemporaryDir().toPath().resolve('lib_zip').toAbsolutePath().toString() + "/lib.zip", "ftp://$RoboRIO_target:5801/"
    }
    exec {
      commandLine 'curl'
      args '-d', 'action=libraries', "http://$RoboRIO_target:5800"
    }
  }
}
   
task deploy {
  dependsOn build
  if(project.hasProperty('ip')) {
    RoboRIO_target=ip
  }
  doLast {
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', jar.archivePath, "ftp://$RoboRIO_target:5801/"
    }
    exec {
      commandLine 'curl'
      args '-d', 'action=deploy', "http://$RoboRIO_target:5800"
    }
  }
}

task deployServers {
  if(project.hasProperty('ip')) {
    RoboRIO_target=ip
  }
  doLast {
    exec {
      commandLine 'scp'
      args 'resources/httpserver', "admin@$RoboRIO_target:/home/lvuser/httpserver"
    }
    exec {
      commandLine 'scp'
      args 'resources/ftpserver', "admin@$RoboRIO_target:/home/lvuser/ftpserver"
    }
    exec {
      commandLine 'scp'
      args 'resources/servers', "admin@$RoboRIO_target:/home/lvuser/servers"
    }
  }
}







// DO NOT USE -- STILL UNDER DEVELOPMENT

task zipDashboard(type: Zip) {
  from file('./')
  into file('SmartDashboard')
  include 'SmartDashboard/'
  archiveName 'SmartDashboard.zip'
  destinationDir(file('./SmartDashboard_new/'))
  //THIS HAS TO CHANGE TO PREVENT FROM FLATTENING THE DIRECTORY STRUCTURE
  eachFile { details ->
     details.setRelativePath(new RelativePath(true, details.getName()))
  }
}

task deploy_dashboard {
  dependsOn zipDashboard
  doLast {
    exec {
      commandLine 'curl'
      args '-u', 'team5499:5499', '-T', getTemporaryDir().toPath().resolve('zip_dir') + '/SmartDashboard.zip', 'ftp://roborio-5499-frc.local:5801/'
    }
    exec {
      commandLine 'curl'
      args '-d', 'action=dashboard', 'http://roborio-5499-frc.local:5800'
    }
  }
}

//--------------------------------------------------------------